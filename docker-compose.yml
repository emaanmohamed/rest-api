version: '3'

#  The services section defines all the different containers that are to be created.
# We have two services namely, web and db
services:
#  db:
#    container_name: "booking-db"
#    platform: linux/x86_64
#    build:
#      context: .
#      dockerfile: db.Dockerfile
#    networks:
#      - default
#    restart: always
#    ports:
#      # <Port exposed> : < MySQL Port running inside container>
#      - "3306:3306"
#    # setting some env vars to create the DB
#    environment:
#      MYSQL_RANDOM_ROOT_PASSWORD: "secret"
#      MYSQL_USER: "root"
#      MYSQL_PASSWORD: ""
#      # OR if you want to use "root" as the user, just these two lines
#      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
#      MYSQL_DATABASE: ${DB_NAME}
#
#    # we mount a data volume to make sure we don't lose data
#    volumes:
#      - mysql_data:C:\wamp64\bin\mysql
#    command: --default-authentication-plugin=mysql_native_password
  api:
      container_name: "rest-api"
      # we want to use the image which is build from our Dockerfile
      build:
        context: .
        dockerfile: api.Dockerfile
      ports:
        - "8099:8099"
      # we are depending on the mysql backend
     # depends_on:
     #   - db
      # We mount the working dir into the container, handy for development
      # This is what makes the hot reloading work inside of a Docker container
      volumes:
        - .:/app/

networks:
      default:
volumes:
    mysql_data: